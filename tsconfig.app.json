{
  "compilerOptions": {
    "baseUrl": "./",
    "paths": {
      "@/*": ["src/*"]
    },
    // 开启项目编译，开启该功能，将会生成被编译文件所在的目录，同时开启declaration、declarationMap和incremental
    "composite": true,
    // 增量编译文件的存储位置，使用该功能时，incremental必须设为true【增量编译：再次编译时只编译增加的内容】
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    // 目标语言的版本
    "target": "ES2020",
    // 启用后的作用是将class声明中的字段语义从[[Set]]变更到[[Define]]
    "useDefineForClassFields": true,
    // 指定编译后代码使用的模块化规范，ESNext表示永远使用最新的
    "module": "ESNext",
    // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array"
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    // 是否跳过声明文件的类型检查，这可以在编译期间以牺牲类型系统准确性为代价来节省时间
    "skipLibCheck": true,

    /* Bundler mode */
    // 指定模块解析策略，如何去解析查找文件
    "moduleResolution": "bundler",
    // 允许 TypeScript 文件中导入使用 TypeScript 特定扩展名的文件，例如 .ts , .mts , .tsx
    "allowImportingTsExtensions": true,
    // 允许从 .json 文件里导入，获取类型
    "resolveJsonModule": true,
    // 是否将每个文件转换为单独的模块
    "isolatedModules": true,
    // 控制TypeScript 如何确定文件是脚本还是模块【force：确保每个非声明文件都被视为模块】
    "moduleDetection": "force",
    // true为不生成编译后的文件
    "noEmit": true,
    // 在preserve模式下生成代码中会保留JSX以供后续的转换操作使用
    "jsx": "preserve",

    /* Linting */
    // 开启所有严格的类型检查
    "strict": true,
    // 检查只声明、未使用的局部变量【false：鼠标hover时提示但是不报错】
    "noUnusedLocals": true,
    // 检查未使用的函数参数【false：鼠标hover时提示但是不报错】
    "noUnusedParameters": true,
    // 检查switch中所有case是否有break
    "noFallthroughCasesInSwitch": true,
  },
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.vue"]
}
